import { prisma } from "../../dal/init.js";
import * as util from '../../util/auth.js';
import * as helper from '../../util/helper.js';
import { logger } from "../../util/logger.js";

// 创建<%= modelName %>
export async function Create<%= modelName %>(req) {
    const data = req.body;
    // 这里可以添加数据验证逻辑
    try {
        const createdItem = await prisma.<%= modelNameLowerCase %>.create({
            data: data,
            // 这里可以添加关联数据的处理
        });
        return createdItem;
    } catch (error) {
        logger.error("Error in Create<%= modelName %>:", error);
        throw error;
    }
}

// 获取所有<%= modelName %>列表（无分页）
export async function GetAll<%= modelName %>sSimple(req) {
    try {
        const items = await prisma.<%= modelNameLowerCase %>.findMany({
            // 这里可以添加过滤和排序逻辑
        });
        return items;
    } catch (error) {
        logger.error("Error in GetAll<%= modelName %>sSimple:", error);
        throw error;
    }
}

// 获取所有<%= modelName %>列表，可以加入分页和筛选逻辑
export async function GetAll<%= modelName %>s(req) {
    const { page, pageSize, ...filters } = req.query;
    try {
        const items = await prisma.<%= modelNameLowerCase %>.findMany({
            where: filters,
            skip: (parseInt(page) - 1) * parseInt(pageSize),
            take: parseInt(pageSize), // 确保 take 是整数
            // 这里可以添加排序逻辑
        });
        return items;
    } catch (error) {
        logger.error("Error in GetAll<%= modelName %>s:", error);
        throw error;
    }
}

// 获取单个<%= modelName %>
export async function Get<%= modelName %>ById(req) {
    const id = parseInt(req.params.id);
    try {
        const item = await prisma.<%= modelNameLowerCase %>.findUnique({
            where: { id },
            // 这里可以添加关联数据的加载
        });
        return item;
    } catch (error) {
        logger.error("Error in Get<%= modelName %>ById:", error);
        throw error;
    }
}

// 更新<%= modelName %>
export async function Update<%= modelName %>(req) {
    const id = parseInt(req.params.id);
    const data = req.body;
    // 这里可以添加数据验证逻辑
    try {
        const updatedItem = await prisma.<%= modelNameLowerCase %>.update({
            where: { id },
            data: data,
            // 这里可以添加关联数据的处理
        });
        return updatedItem;
    } catch (error) {
        logger.error("Error in Update<%= modelName %>:", error);
        throw error;
    }
}

// 删除<%= modelName %>
export async function Delete<%= modelName %>(req) {
    const id = parseInt(req.params.id);
    try {
        await prisma.<%= modelNameLowerCase %>.delete({
            where: { id }
        });
        return { message: '<%= modelName %> Deleted Successfully' };
    } catch (error) {
        logger.error("Error in Delete<%= modelName %>:", error);
        throw error;
    }
}
